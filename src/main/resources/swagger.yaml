openapi: 3.0.0
info:
  title: Demonstration of the use Swagger OpenAPI
  version: 0.0.1
tags:
  - name: users
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: Create user and return data user
      operationId: createUser
      requestBody:
        description: Receive json data user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWeb'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - users
      summary: Update user
      description: Update user and return new data user
      operationId: updateUser
      requestBody:
        description: Receive json data user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
        - users
      summary: Get user
      description:  Get user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWeb'
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - users
      summary: Delete user
      description:  Delete user by id
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: string
                example: User deleted
        '404':
          description: Not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: John
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '123456'
    UserForm:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '123456'
    UserWeb:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: John
        email:
          type: string
          example: john@email.com
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
